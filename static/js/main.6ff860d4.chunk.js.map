{"version":3,"sources":["reducer/taskReducer.js","context/TaskContext.js","components/TaskForm.js","components/Tasks.js","components/DoneTasks.js","App.js","serviceWorker.js","index.js"],"names":["taskReducer","state","action","type","name","task","id","uuid","filter","book","TaskContext","createContext","TaskContextProveder","props","useReducer","localData","localStorage","getItem","JSON","parse","tasks","dispatch","useEffect","setItem","stringify","Provider","value","children","NewTaskForm","useContext","useState","setName","onSubmit","e","preventDefault","placeholder","onChange","target","Tasks","console","log","listTasks","map","key","onClick","length","TaskForm","to","DoneTasks","App","className","basename","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAEaA,EAAc,SAAEC,EAAOC,GAChC,OAAOA,EAAOC,MACV,IAAK,WACD,MAAM,GAAN,mBACOF,GADP,CACc,CACNG,KAAMF,EAAOG,KAAKD,KAClBE,GAAIC,SAGhB,IAAK,cACD,OAAON,EAAMO,QAAQ,SAAAC,GAAI,OAAIA,EAAKH,IAAMJ,EAAOI,MACnD,QACI,OAAOL,ICXNS,EAAcC,0BAiBZC,EAfa,SAACC,GAAW,IAAD,EACPC,qBAAYd,EAAa,IAAI,WACrD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHZ,mBAC3BK,EAD2B,KACpBC,EADoB,KAQnC,OAHAC,qBAAW,WACPN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC9C,CAAEA,IAED,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACjCR,EAAMc,WCOJC,EAnBK,WAAO,IACfP,EAAaQ,qBAAYnB,GAAzBW,SADc,EAEIS,mBAAS,IAFb,mBAEd1B,EAFc,KAER2B,EAFQ,KAUtB,OACI,0BAAMC,SARW,SAAAC,GACjBA,EAAEC,iBACFb,EAAS,CAAClB,KAAM,WAAYE,KAAM,CAC9BD,UAEJ2B,EAAQ,MAIJ,2BAAO5B,KAAK,OAAOgC,YAAY,wFAAkBT,MAAQtB,EACrDgC,SAAW,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOX,UACtC,2BAAOvB,KAAK,SAASuB,MAAM,uDCgBxBY,EA5BD,WAAO,IAAD,EACYT,qBAAYnB,GAAhCU,EADQ,EACRA,MAAOC,EADC,EACDA,SACfkB,QAAQC,IAAIpB,GAEZ,IAAMqB,EAAYrB,EAAMsB,KAAK,SAAArC,GAAI,OAC7B,wBAAIsC,IAAMtC,EAAKC,IAAf,IAAuBD,EAAKD,KAA5B,IAAmC,4BAAQwC,QAAU,kBAAMvB,EAAS,CAAElB,KAAM,cAAeG,GAAID,EAAKC,OAAjE,0DAAnC,QAGJ,OAAOc,EAAMyB,OACT,6BACI,mHACA,2BAAG,6DAAgBzB,EAAMyB,OAAtB,IAAkD,IAAjBzB,EAAMyB,OAAN,gSACpC,4BACMJ,GAEN,kBAACK,EAAD,MACA,kBAAC,IAAD,CAAMC,GAAG,cAAT,oKAGJ,6BACI,mHACA,mIACA,kBAACD,EAAD,MACA,kBAAC,IAAD,CAAMC,GAAG,cAAT,qKChBGC,EATG,WACd,OACI,6BACI,gLACA,kBAAC,IAAD,CAAMD,GAAG,KAAT,kGCsBGE,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAS,qCACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAWD,KAAK,qBCRVE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.6ff860d4.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\n\nexport const taskReducer = ( state, action ) => {\n    switch(action.type) {\n        case 'ADD_TASK':\n            return [\n                ...state, {\n                    name: action.task.name,\n                    id: uuid()\n                }\n            ]\n        case 'REMOVE_TASK':\n            return state.filter( book => book.id != action.id )   \n        default:\n            return state      \n    }\n}","import React, { createContext, useReducer, useEffect } from 'react';\nimport { taskReducer } from '../reducer/taskReducer';\n\nexport const TaskContext = createContext()\n\nconst TaskContextProveder = (props) => {\n    const [ tasks, dispatch ] = useReducer( taskReducer, [], () => {\n        const localData = localStorage.getItem('tasks')\n        return localData ? JSON.parse(localData) : []\n    } )\n    useEffect( () => {\n        localStorage.setItem('tasks', JSON.stringify(tasks))\n    }, [ tasks ] ) \n    return ( \n        <TaskContext.Provider value={{ tasks, dispatch }}>\n            {props.children}\n        </TaskContext.Provider>\n     );\n}\n \nexport default TaskContextProveder;","import React, { useContext, useState } from 'react';\nimport { TaskContext } from '../context/TaskContext';\n\nconst NewTaskForm = () => {\n    const { dispatch } = useContext( TaskContext ) \n    const [ name, setName ] = useState('')\n    const handleSubmit = e => {\n        e.preventDefault()\n        dispatch({type: 'ADD_TASK', task: {\n            name\n        }} )\n        setName('')\n    }\n    return ( \n        <form onSubmit={ handleSubmit }>\n            <input type='text' placeholder='название задачи' value={ name }\n                onChange={ e => setName( e.target.value ) } />\n            <input type='submit' value='добавить' />\n        </form>\n     );\n}\n \nexport default NewTaskForm;","import React, { useContext } from 'react';\nimport { Link } from \"react-router-dom\";\nimport TaskForm from './TaskForm';\nimport { TaskContext } from './../context/TaskContext';\n\nconst Tasks = () => {\n    const { tasks, dispatch } = useContext( TaskContext )\n    console.log(tasks)\n\n    const listTasks = tasks.map( task => (\n        <li key={ task.id }> { task.name } <button onClick={ () => dispatch({ type: 'REMOVE_TASK', id: task.id }) } >Выполнена</button> </li>\n    ) )\n     \n    return tasks.length ? ( \n        <div>\n            <h1>Задачи ( покупки )</h1>\n            <p><strong>У вас { tasks.length } { tasks.length === 1 ? `задача ожидает выполнения` : `задачи ожидают выполнения` }</strong></p>\n            <ol>\n                { listTasks }\n            </ol>\n            <TaskForm />\n            <Link to='/donetasks'>Перейти к Выполненным задачам</Link>\n        </div>\n     ) : (\n        <div>\n            <h1>Задачи ( покупки )</h1>\n            <p>Вперёд за победами !</p>\n            <TaskForm />\n            <Link to='/donetasks'>Перейти к Выполненным задачам</Link>\n        </div>\n     )\n}\n \nexport default Tasks;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DoneTasks = () => {\n    return ( \n        <div>\n            <h1>Выполненных задач ( покупок )</h1>\n            <Link to='/'>Перейти к задачам</Link>\n        </div>\n     );\n}\n \nexport default DoneTasks;","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Tasks from './components/Tasks';\nimport DoneTasks from './components/DoneTasks';\nimport TaskContextProveder from './context/TaskContext';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskContextProveder>\n        <Router basename='/todo-context-hooks-localStorage-'>\n          <Switch>\n            <Route path='/' exact>\n              <Tasks />\n            </Route>\n            <Route>\n              <DoneTasks path='/donetasks' />\n            </Route>\n          </Switch>\n        </Router>\n      </TaskContextProveder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}